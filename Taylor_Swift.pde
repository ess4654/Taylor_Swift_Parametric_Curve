import ddf.minim.*;

Minim minim;
AudioPlayer player;

float DefaultScale = 0.35;
float FR = 30;
float SampleRate = 18;

boolean running = true;
boolean DEBUGGING = false;
boolean SoundOn = true;

float t = 0;
float scale = DefaultScale;
color transparent = color(0, 0, 0, 0);
color skin = color(247, 199, 186);
color hair = color(254, 218, 157);
color blue = color(36, 111, 130);
color black = color(240, 240, 240);
color brown = color(91, 54, 33);
color red = color(235, 23, 8);
color darkred = color(172, 2, 0);
color white = color(255, 255, 255);
ArrayList<PVector> points = new ArrayList<PVector>();
ArrayList<Integer> lineColor = new ArrayList<Integer>();
ArrayList<Integer> strokes = new ArrayList<Integer>();

void setup()
{
  fullScreen(P2D);
  //size(800, 800, P2D);
  background(0);
  noFill();
  smooth();
  frameRate(FR);
  
  minim = new Minim(this);
  player = minim.loadFile("Bad Blood.mp3");
  if(SoundOn)
    player.loop();
}

void keyPressed() {
  if(key == ' ')
    running = !running;
  if(key == 'r')
    reset();
}

void reset()
{
  frameCount = -1;
  t = 0;
  lineColor.clear();
  strokes.clear();
  points.clear();
  minim.stop();
  minim = new Minim(this);
  if(SoundOn)
    player.loop();
  scale = DefaultScale;
}

float updateT(float T)
{
  T += 0.004;
  
  if(T >= 204.174) { //END
    strokes.add(1);
    lineColor.add(color(0, 0, 0));
    return 68 * PI;
  }
  if(T >= 201.604 && T < 204.174) { //NOSE LINE
    strokes.add(2);
    lineColor.add(skin);
    return T + 0.004;
  }
  if(T >= 191.689 && T < 201.604) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 201.604;
  }
  if(T >= 188.523 && T < 191.689) { //NOSE 2
    strokes.add(3);
    lineColor.add(skin);
    return T;
  }
  if(T >= 179.192 && T < 188.523) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 188.523;
  }
  if(T >= 175.954 && T < 179.192) { //NOSE 1
    strokes.add(3);
    lineColor.add(skin);
    return T;
  }
  if(T >= 169.966 && T < 175.954) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 175.954;
  }
  if(T >= 163.365 && T < 169.966) { //TOP HAIR
    strokes.add(2);
    lineColor.add(hair);
    return T - 0.003;
  }
  if(T >= 157.113 && T < 163.365) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 163.365;
  }
  if(T >= 150.797 && T < 157.113) { //RIGHT HAIR
    strokes.add(2);
    lineColor.add(hair);
    return T - 0.0035;
  }
  if(T >= 144.492 && T < 150.797) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 150.797;
  }
  if(T >= 138.236 && T < 144.492) { //LEFT HAIR
    strokes.add(2);
    lineColor.add(hair);
    return T - 0.0035;
  }
  if(T >= 128.858 && T < 138.236) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 138.236;
  }
  if(T >= 125.696 && T < 128.858) { //RIGHT EYELASHES
    strokes.add(1);
    lineColor.add(brown);
    return T;
  }
  if(T >= 116.253 && T < 125.696) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 125.696;
  }
  if(T >= 113.103 && T < 116.253) { //LEFT EYELASHES
    strokes.add(1);
    lineColor.add(brown);
    return T;
  }
  if(T >= 103.840 && T < 113.103) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 113.103;
  }
  if(T >= 100.534 && T < 103.840) { //LIPS LINES
    strokes.add(2);
    lineColor.add(darkred);
    return T + 0.004;
  }
  if(T >= 94.145 && T < 100.534) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 100.534;
  }
  if(T >= 94.145 && T < 100.534) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 100.534;
  }
  if(T >= 87.977 && T < 94.145) { //LEFT PUPIL
    strokes.add(2);
    lineColor.add(black);
    return T + 0.008;
  }
  if(T >= 80.665 && T < 87.977) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 87.977;
  }
  if(T >= 75.400 && T < 80.665) { //RIGHT PUPIL
    strokes.add(2);
    lineColor.add(black);
    return T + 0.008;
  }
  if(T >= 69.040 && T < 75.400) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 75.400;
  }
  if(T >= 62.847 && T < 69.040) { //LEFT EYEBALL
    strokes.add(2);
    lineColor.add(blue);
    if(T >= 63.735 && T < 65.563)
      T = 65.563;
    return T + 0.008;
  }
  if(T >= 56.436 && T < 62.847) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 62.847;
  }
  if(T >= 50.290 && T < 56.436) { //RIGHT EYEBALL
    strokes.add(2);
    lineColor.add(blue);
    if(T >= 51.838 && T < 53.186)
      T = 53.186;
    return T + 0.008;
  }
  if(T >= 43.974 && T < 50.290) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 50.290;
  }
  if(T >= 37.704 && T < 43.974) { //RIGHT EYE
    strokes.add(2);
    lineColor.add(skin);
    return T + 0.004;
  }
  if(T >= 31.357 && T < 37.704) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 37.704;
  }
  if(T >= 25.166 && T < 31.357) { //LEFT EYE
    strokes.add(2);
    lineColor.add(skin);
    return T + 0.004;
  }
  if(T >= 18.834 && T < 25.166) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 25.166;
  }
  if(T >= 12.595 && T < 18.834) { //LIPS
    strokes.add(3);
    lineColor.add(red);
    return T + 0.004;
  }
  if(T >= 6.280 && T < 12.595) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 12.595;
  }
  else { //FACE OUTLINE
    strokes.add(3);
    lineColor.add(skin);
  }
  
  return T;
}

void draw()
{ 
  //if(frameCount < (FR/2.0)) return;
  if(t <= 68 * PI && running)
  {
    for(int z = 0; z<SampleRate; z++) {
      t = updateT(t);
      points.add(new PVector(x(t), -y(t)));
      if(DEBUGGING)
        print(t + "\n");
    }
  } else {
    if(!DEBUGGING)
      scale += 0.0004;
  }
  
  translate(width/2, height/2);
  background(0);
  
  beginShape();
  for(int i = 0; i < points.size(); i++)
  {
    if(points.get(i).x == 0 && points.get(i).y == 0) continue;
    strokeWeight(strokes.get(i));
    stroke(lineColor.get(i));
    point(points.get(i).x * scale, points.get(i).y * scale);
  }
  endShape();
}

float sgn(float x)
{
  if(x == 0) return 0;
  else if(x > 0) return 1;
  else return -1;
}

float theta(float x)
{
  if(x == 0) return 0.5;
  else if(x > 0) return 1;
  else return 0;
}

float SIN(float x)
{
  return sin(x);
}

float x(float t)
{
  return ((-1.0/3*sin(3.0/2 - 7*t) - 1.0/2*sin(3.0/2 - 6*t) - 1.0/2*sin(3.0/2 - 5*t) -sin(3.0/2 - 4*t) - 5*sin(3.0/2 - 2*t) + 19.0/4*sin(t + 3.0/2) + 1.0/2*sin(3*t + 3.0/2) - 124.0/3)*theta(67*PI -t)*theta(t - 63*PI) + (-1.0/2*sin(3.0/2 - 12*t) - 5.0/3*sin(3.0/2 - 11*t) - 5.0/4*sin(3.0/2 - 9*t) - 4*sin(3.0/2 - 7*t) - 3.0/2*sin(3.0/2 - 6*t) - 13.0/4*sin(3.0/2 - 5*t) - 3*sin(3.0/2 - 4*t) - 1.0/2*sin(3.0/2 - 3*t) - 25.0/2*sin(3.0/2 - 2*t) + 221.0/2*sin(t + 3.0/2) + 1.0/5*sin(8*t + 3.0/2) + 3.0/2*sin(10*t + 3.0/2) - 365.0/4)*theta(63*PI -t)*theta(t - 59*PI) + (16*sin(t + 3.0/2) + 26*sin(2*t + 3.0/2) + 97.0/4*sin(3*t + 3.0/2) + 2.0/3*sin(4*t + 3.0/2) + 11.0/2*sin(5*t + 3.0/2) + 1.0/6*sin(6*t + 3.0/2) + 2*sin(7*t + 3.0/2) + 2.0/3*sin(8*t + 3.0/2) + 2*sin(9*t + 3.0/2) - 512.0/3)*theta(59*PI -t)*theta(t - 55*PI) + (-2.0/3*sin(3.0/2 - 64*t) - 5.0/2*sin(3.0/2 - 60*t) -sin(3.0/2 - 57*t) - 9.0/4*sin(3.0/2 - 39*t) - 19.0/4*sin(3.0/2 - 29*t) - 11.0/3*sin(3.0/2 - 28*t) - 21.0/4*sin(3.0/2 - 26*t) - 2*sin(3.0/2 - 25*t) - 13.0/2*sin(3.0/2 - 18*t) - 52.0/3*sin(3.0/2 - 17*t) - 221.0/3*sin(3.0/2 - 6*t) - 139.0/2*sin(3.0/2 - 4*t) - 151.0/2*sin(3.0/2 - 2*t) - 333.0/2*sin(3.0/2 -t) + 79*sin(3*t + 3.0/2) + 247.0/3*sin(5*t + 3.0/2) + 554.0/3*sin(7*t + 3.0/2) + 140*sin(8*t + 14.0/3) + 86.0/5*sin(9*t + 14.0/3) + 134*sin(10*t + 3.0/2) + 131*sin(11*t + 3.0/2) + 103.0/2*sin(12*t + 3.0/2) + 47.0/3*sin(13*t + 3.0/2) + 21*sin(14*t + 14.0/3) + 17.0/2*sin(15*t + 14.0/3) + 11*sin(16*t + 3.0/2) + 45.0/2*sin(19*t + 3.0/2) + 17.0/3*sin(20*t + 5.0/3) + 55.0/3*sin(21*t + 3.0/2) + 31.0/6*sin(22*t + 5.0/3) + 7.0/4*sin(23*t + 13.0/6) + 38.0/3*sin(24*t + 3.0/2) + 29.0/3*sin(27*t + 3.0/2) + 4.0/3*sin(30*t + 5.0/3) + 25.0/6*sin(31*t + 9.0/2) + 19.0/4*sin(32*t + 3.0/2) + 47.0/4*sin(33*t + 3.0/2) + 2*sin(34*t + 3.0/2) + 5.0/2*sin(35*t + 14.0/3) + 2*sin(36*t + 14.0/3) + 7.0/2*sin(37*t + 5.0/3) + 8.0/3*sin(38*t + 14.0/3) + 3.0/2*sin(40*t + 7.0/4) + 2*sin(41*t + 5.0/3) + 7.0/2*sin(42*t + 3.0/2) + 2.0/3*sin(43*t + 3.0/2) + 5*sin(44*t + 3.0/2) + 5.0/2*sin(45*t + 5.0/3) + 7.0/4*sin(46*t + 9.0/2) + 5.0/4*sin(47*t + 5.0/3) + 11.0/3*sin(48*t + 14.0/3) + 3*sin(49*t + 3.0/2) + 2*sin(50*t + 3.0/2) + 1.0/3*sin(51*t + 5.0/3) + 3.0/2*sin(52*t + 14.0/3) +sin(53*t + 9.0/2) + 16.0/5*sin(54*t + 3.0/2) + 11.0/4*sin(55*t + 3.0/2) + 4*sin(56*t + 3.0/2) +sin(58*t + 9.0/2) + 1.0/2*sin(59*t + 9.0/2) + 4.0/3*sin(61*t + 3.0/2) + 1.0/3*sin(62*t + 5.0/3) + 3.0/4*sin(63*t + 5.0/3) + 4.0/3*sin(65*t + 5.0/3) + 9.0/4*sin(66*t + 3.0/2) + 2*sin(67*t + 3.0/2) +sin(68*t + 5.0/3) + 2*sin(69*t + 14.0/3) + 62)*theta(55*PI -t)*theta(t - 51*PI) + (-3.0/4*sin(3.0/2 - 67*t) - 2.0/3*sin(3.0/2 - 63*t) - 8.0/3*sin(3.0/2 - 54*t) - 22.0/3*sin(3.0/2 - 49*t) - 39.0/4*sin(3.0/2 - 40*t) - 2*sin(3.0/2 - 37*t) - 5.0/3*sin(3.0/2 - 34*t) - 2.0/3*sin(3.0/4 - 26*t) - 3.0/2*sin(6.0/5 - 20*t) - 87.0/4*sin(3.0/2 - 12*t) - 105.0/2*sin(3.0/2 - 10*t) - 142*sin(3.0/2 - 6*t) - 455.0/2*sin(3.0/2 - 4*t) - 331.0/4*sin(3.0/2 - 2*t) + 4*sin(t + 9.0/2) + 116.0/5*sin(3*t + 5.0/3) + 210*sin(5*t + 3.0/2) + 6*sin(7*t + 2) + 16.0/3*sin(8*t + 1) + 128*sin(9*t + 3.0/2) + 50.0/3*sin(11*t + 9.0/2) + 2*sin(13*t + 7.0/4) + 4.0/3*sin(14*t + 1.0/3) + 499.0/6*sin(15*t + 3.0/2) + 16*sin(16*t + 3.0/2) + 74.0/3*sin(17*t + 14.0/3) + 43.0/2*sin(18*t + 14.0/3) + 89.0/3*sin(19*t + 3.0/2) + 14.0/3*sin(21*t + 3.0/2) + 18*sin(22*t + 3.0/2) + 36.0/7*sin(23*t + 3.0/2) + 17.0/2*sin(24*t + 14.0/3) + 13.0/2*sin(25*t + 3.0/2) + 9*sin(27*t + 14.0/3) + 9.0/4*sin(28*t + 9.0/2) + 13.0/2*sin(29*t + 3.0/2) + 29.0/4*sin(30*t + 9.0/2) + 31.0/4*sin(31*t + 14.0/3) + 38.0/3*sin(32*t + 3.0/2) + 21*sin(33*t + 3.0/2) + 10.0/3*sin(35*t + 4.0/3) + 21.0/2*sin(36*t + 3.0/2) + 38.0/3*sin(38*t + 3.0/2) + 37.0/2*sin(39*t + 3.0/2) + 5.0/2*sin(41*t + 13.0/3) + 73.0/4*sin(42*t + 9.0/2) + 7*sin(43*t + 9.0/2) + 10.0/3*sin(44*t + 3.0/2) + 16.0/3*sin(45*t + 14.0/3) + 4*sin(46*t + 3.0/2) + 11.0/3*sin(47*t + 3.0/2) + 3*sin(48*t + 9.0/2) + 5*sin(50*t + 3.0/2) + 16.0/3*sin(51*t + 3.0/2) + 6*sin(52*t + 3.0/2) + 23.0/3*sin(53*t + 3.0/2) + 17.0/3*sin(55*t + 3.0/2) + 4*sin(56*t + 4.0/3) + 1.0/3*sin(57*t + 9.0/2) + 17.0/2*sin(58*t + 9.0/2) + 2*sin(59*t + 9.0/2) + 5*sin(60*t + 3.0/2) + 23.0/4*sin(61*t + 3.0/2) + 3.0/2*sin(62*t + 3.0/2) + 5.0/2*sin(64*t + 9.0/2) + 7.0/2*sin(65*t + 9.0/2) + 2.0/3*sin(66*t + 9.0/2) + 17.0/3*sin(68*t + 9.0/2) + 5.0/4*sin(69*t + 2) + 1.0/2*sin(70*t + 3.0/2) + 2*sin(71*t + 9.0/2) + 13.0/6*sin(72*t + 5.0/3) + 5.0/2*sin(73*t + 9.0/2) + 1.0/3*sin(74*t + 11.0/3) + 9.0/2*sin(75*t + 9.0/2) + 5.0/3*sin(76*t + 9.0/2) + 4*sin(77*t + 3.0/2) + 14.0/3*sin(78*t + 9.0/2) + 2*sin(79*t + 3.0/2) + 11.0/3*sin(80*t + 4.0/3) + 3.0/2*sin(81*t + 3.0/2) + 1712.0/3)*theta(51*PI -t)*theta(t - 47*PI) + (-4.0/3*sin(4.0/3 - 78*t) - 13.0/3*sin(3.0/2 - 70*t) - 3.0/2*sin(5.0/4 - 68*t) - 3.0/4*sin(1 - 65*t) - 10.0/3*sin(3.0/2 - 63*t) - 3.0/2*sin(3.0/2 - 61*t) - 5.0/3*sin(3.0/2 - 60*t) - 4.0/3*sin(7.0/6 - 58*t) - 2*sin(3.0/2 - 57*t) - 21.0/2*sin(3.0/2 - 53*t) - 7.0/3*sin(3.0/2 - 51*t) - 17.0/3*sin(3.0/2 - 49*t) - 7*sin(4.0/3 - 48*t) - 16.0/3*sin(3.0/2 - 47*t) - 13.0/3*sin(3.0/2 - 45*t) - 6*sin(3.0/2 - 44*t) - 5.0/2*sin(3.0/2 - 37*t) - 7*sin(3.0/2 - 32*t) - 7*sin(3.0/2 - 31*t) - 64.0/3*sin(3.0/2 - 20*t) - 45.0/2*sin(3.0/2 - 19*t) - 111.0/4*sin(3.0/2 - 18*t) - 5*sin(3.0/2 - 13*t) - 17*sin(3.0/2 - 12*t) - 65.0/3*sin(3.0/2 - 9*t) + 268.0/3*sin(t + 14.0/3) + 311.0/2*sin(2*t + 3.0/2) + 27*sin(3*t + 14.0/3) + 14.0/3*sin(4*t + 14.0/3) + 3.0/2*sin(5*t + 6.0/5) + 23*sin(6*t + 3.0/2) + 19.0/2*sin(7*t + 14.0/3) + 4*sin(8*t + 4.0/3) + 17.0/2*sin(10*t + 3.0/2) + 97.0/6*sin(11*t + 3.0/2) + 31.0/4*sin(14*t + 3.0/2) + 20.0/3*sin(15*t + 9.0/2) + 71.0/3*sin(16*t + 3.0/2) + 12*sin(17*t + 3.0/2) + 23.0/4*sin(21*t + 9.0/2) + 163.0/3*sin(22*t + 5.0/3) + 30*sin(23*t + 5.0/3) + 35.0/2*sin(24*t + 5.0/3) + 9*sin(25*t + 5.0/3) + 106.0/7*sin(26*t + 3.0/2) + 15.0/2*sin(27*t + 5.0/3) + 5.0/3*sin(28*t + 4) + 47.0/4*sin(29*t + 3.0/2) + 3.0/2*sin(30*t + 4.0/3) + 39.0/2*sin(33*t + 3.0/2) + 29.0/7*sin(34*t + 9.0/2) + 13.0/2*sin(35*t + 14.0/3) + 5*sin(36*t + 3.0/2) + 5.0/3*sin(38*t + 11.0/3) + 10.0/3*sin(39*t + 3.0/2) + 7.0/4*sin(40*t + 3.0/2) + 5.0/2*sin(41*t + 9.0/4) + 6*sin(42*t + 5.0/3) + 11.0/3*sin(43*t + 3.0/2) + 6.0/5*sin(46*t + 5.0/4) + 2*sin(50*t + 3.0/2) + 3*sin(52*t + 3.0/2) + 5*sin(54*t + 3.0/2) + 1.0/2*sin(55*t + 4) + 5.0/4*sin(56*t + 5.0/3) + 3*sin(59*t + 5.0/3) + 3.0/2*sin(62*t + 4.0/3) + 3.0/2*sin(64*t + 5.0/3) + 2*sin(66*t + 5.0/3) + 5.0/2*sin(67*t + 9.0/2) + 11.0/3*sin(69*t + 3.0/2) + 3.0/2*sin(71*t + 5.0/3) + 2.0/3*sin(72*t + 7.0/6) + 1.0/2*sin(73*t + 5.0/2) + 3.0/4*sin(74*t + 5.0/2) + 4.0/3*sin(75*t + 3.0/2) + 1.0/6*sin(76*t + 25.0/6) + 1.0/2*sin(77*t + 4) + 2*sin(79*t + 5.0/3) + 3.0/2*sin(80*t + 9.0/2) + 2*sin(81*t + 7.0/4) + 2.0/3*sin(83*t + 7.0/4) - 1774.0/3)*theta(47*PI -t)*theta(t - 43*PI) + (-1.0/6*sin(3.0/2 - 20*t) - 3.0/2*sin(3.0/2 - 16*t) - 5.0/2*sin(3.0/2 - 15*t) - 5.0/4*sin(3.0/2 - 14*t) - 8.0/3*sin(3.0/2 - 12*t) - 2.0/3*sin(3.0/2 - 11*t) - 2*sin(3.0/2 - 10*t) - 8.0/3*sin(3.0/2 - 9*t) - 11.0/5*sin(3.0/2 - 8*t) -sin(3.0/2 - 5*t) - 12*sin(3.0/2 - 4*t) - 37.0/2*sin(3.0/2 - 3*t) - 289.0/6*sin(3.0/2 - 2*t) + 87.0/4*sin(t + 3.0/2) + 2.0/3*sin(6*t + 3.0/2) + 15.0/4*sin(13*t + 3.0/2) + 2.0/3*sin(18*t + 5.0/3) + 1.0/3*sin(19*t + 5.0/3) + 343.0/2)*theta(43*PI -t)*theta(t - 39*PI) + (-3.0/2*sin(3.0/2 - 19*t) -sin(3.0/2 - 12*t) - 2*sin(3.0/2 - 11*t) - 57.0/2*sin(3.0/2 -t) + 59*sin(2*t + 3.0/2) + 3*sin(3*t + 5.0/3) + 32.0/3*sin(4*t + 3.0/2) + 13.0/4*sin(5*t + 14.0/3) + 11.0/2*sin(6*t + 3.0/2) + 2*sin(7*t + 14.0/3) + 3*sin(8*t + 3.0/2) + 13.0/3*sin(10*t + 3.0/2) +sin(13*t + 14.0/3) + 5*sin(14*t + 5.0/3) + 8.0/3*sin(15*t + 5.0/3) + 1.0/3*sin(16*t + 2) + 11.0/3*sin(17*t + 5.0/3) + 1.0/2*sin(18*t + 5.0/3) + 1.0/3*sin(20*t + 5.0/3) - 357)*theta(39*PI -t)*theta(t - 35*PI) + (183.0/2*sin(t + 3.0/2) + 8.0/3*sin(2*t + 3.0/2) + 65.0/4*sin(3*t + 3.0/2) + 5.0/2*sin(4*t + 14.0/3) + 7.0/2*sin(5*t + 3.0/2) - 72)*theta(35*PI -t)*theta(t - 31*PI) + (-1.0/3*sin(1.0/5 - 9*t) - 1.0/2*sin(1.0/2 - 7*t) - 1.0/2*sin(2.0/3 - 5*t) - 19.0/4*sin(6.0/5 - 2*t) - 13.0/3*sin(6.0/5 -t) + 1.0/2*sin(3*t + 1) + 2.0/3*sin(4*t + 11.0/3) + 1.0/3*sin(6*t + 3) + 1.0/3*sin(8*t + 7.0/2) + 1.0/4*sin(11*t + 1.0/7) + 1.0/4*sin(12*t + 10.0/3) - 896.0/3)*theta(31*PI -t)*theta(t - 27*PI) + (-1.0/5*sin(1.0/2 - 11*t) - 1.0/5*sin(1.0/2 - 9*t) - 1.0/2*sin(1 - 5*t) - 23.0/3*sin(1.0/6 - 2*t) + 11.0/2*sin(t + 1) + 3.0/2*sin(3*t + 1) +sin(4*t + 7.0/2) + 1.0/2*sin(6*t + 5.0/2) + 1.0/3*sin(8*t + 5.0/2) + 271.0/2)*theta(27*PI -t)*theta(t - 23*PI) + (63.0/2*sin(t + 1) + 1.0/2*sin(2*t + 4) + 2.0/3*sin(3*t + 1.0/2) + 1.0/3*sin(4*t + 8.0/3) - 299)*theta(23*PI -t)*theta(t - 19*PI) + (115.0/3*sin(t + 1) + 400.0/3)*theta(19*PI -t)*theta(t - 15*PI) + (-1.0/2*sin(1 - 6*t) + 199.0/2*sin(t + 4.0/3) + 1.0/4*sin(2*t + 2.0/3) + 55.0/6*sin(3*t + 1) + 1.0/2*sin(4*t + 1.0/4) + 10.0/3*sin(5*t + 1) + 5.0/3*sin(7*t + 2.0/3) + 1.0/2*sin(8*t + 9.0/2) +sin(9*t + 1.0/2) + 1.0/6*sin(10*t + 11.0/3) + 2.0/3*sin(11*t + 1.0/2) + 358.0/3)*theta(15*PI -t)*theta(t - 11*PI) + (77*sin(t + 9.0/2) + 3.0/2*sin(2*t + 5.0/2) + 15.0/2*sin(3*t + 25.0/6) + 5.0/4*sin(4*t + 7.0/4) + 5.0/2*sin(5*t + 11.0/3) + 3.0/4*sin(6*t + 5.0/3) + 7.0/6*sin(7*t + 10.0/3) + 2.0/3*sin(8*t + 3.0/2) + 1.0/2*sin(9*t + 13.0/4) + 1.0/2*sin(10*t + 1) + 1.0/3*sin(11*t + 16.0/5) + 1.0/2*sin(12*t + 2.0/3) - 1601.0/5)*theta(11*PI -t)*theta(t - 7*PI) + (-1.0/2*sin(2.0/3 - 12*t) -sin(3.0/2 - 10*t) - 9.0/4*sin(5.0/4 - 8*t) + 389.0/3*sin(t + 5.0/3) + 14.0/3*sin(2*t + 16.0/5) + 13.0/2*sin(3*t + 2) + 13.0/2*sin(4*t + 4) + 5.0/3*sin(5*t + 3.0/2) + 4*sin(6*t + 9.0/2) + 1.0/2*sin(7*t + 11.0/5) + 1.0/2*sin(9*t + 1.0/3) + 3.0/4*sin(11*t + 1) - 76)*theta(7*PI -t)*theta(t - 3*PI) + (-sin(1.0/4 - 16*t) - 8.0/3*sin(1 - 12*t) - 9.0/2*sin(1.0/7 - 11*t) - 14.0/3*sin(1 - 7*t) + 131.0/3*sin(2*t) + 863.0/2*sin(t + 1) + 50.0/3*sin(3*t + 2) + 11*sin(4*t + 5.0/2) + 21.0/2*sin(5*t + 2.0/3) + 10.0/3*sin(6*t + 3.0/2) + 3.0/2*sin(8*t + 2) + 7.0/2*sin(9*t + 1) + 17.0/3*sin(10*t + 1.0/2) + 5.0/2*sin(13*t + 21.0/5) + 5.0/2*sin(14*t + 11.0/3) +sin(15*t + 7.0/2) + 2.0/3*sin(17*t + 7.0/2) + 1.0/3*sin(18*t + 3.0/2) - 368.0/3)*theta(3*PI -t)*theta(t +PI))*theta(sqrt(sgn(sin(t/2))));
}

float y(float t)
{
  return ((-2.0/3*sin(3.0/2 - 7*t) - 3.0/2*sin(3.0/2 - 5*t) - 11.0/3*sin(3.0/2 - 3*t) - 2.0/3*sin(3.0/2 - 2*t) - 38*sin(3.0/2 -t) + 1.0/4*sin(4*t + 3.0/2) + 1.0/5*sin(6*t + 3.0/2) - 397.0/2)*theta(67*PI -t)*theta(t - 63*PI) + (80.0/3*sin(t + 3.0/2) + 101.0/4*sin(2*t + 3.0/2) + 3*sin(3*t + 3.0/2) + 18*sin(4*t + 3.0/2) + 5.0/3*sin(5*t + 3.0/2) + 1.0/2*sin(6*t + 3.0/2) + 3.0/2*sin(7*t + 14.0/3) + 5.0/2*sin(8*t + 3.0/2) + 1.0/2*sin(9*t + 14.0/3) + 3*sin(10*t + 3.0/2) + 4.0/3*sin(11*t + 14.0/3) + 1.0/4*sin(12*t + 3.0/2) - 1097.0/4)*theta(63*PI -t)*theta(t - 59*PI) + (-1.0/2*sin(3.0/2 - 9*t) - 1.0/2*sin(3.0/2 - 7*t) - 1.0/2*sin(3.0/2 - 5*t) - 10.0/3*sin(3.0/2 - 3*t) - 127*sin(3.0/2 -t) + 16*sin(2*t + 3.0/2) + 26.0/3*sin(4*t + 3.0/2) + 2*sin(6*t + 3.0/2) + 2.0/3*sin(8*t + 3.0/2) - 172)*theta(59*PI -t)*theta(t - 55*PI) + (-1.0/2*sin(3.0/2 - 66*t) - 4.0/3*sin(3.0/2 - 65*t) - 6.0/5*sin(3.0/2 - 55*t) - 4*sin(3.0/2 - 51*t) - 11.0/2*sin(3.0/2 - 49*t) - 6.0/5*sin(4.0/3 - 48*t) - 13.0/6*sin(3.0/2 - 47*t) - 4.0/3*sin(5.0/4 - 45*t) - 11.0/5*sin(3.0/2 - 44*t) - 9.0/2*sin(3.0/2 - 41*t) - 4*sin(3.0/2 - 34*t) - 6*sin(3.0/2 - 32*t) - 4.0/3*sin(1 - 31*t) -sin(3.0/2 - 29*t) - 79.0/4*sin(3.0/2 - 28*t) - 66.0/5*sin(3.0/2 - 27*t) - 11*sin(3.0/2 - 23*t) - 47.0/4*sin(3.0/2 - 21*t) - 51.0/5*sin(3.0/2 - 17*t) - 17.0/3*sin(3.0/2 - 13*t) - 52*sin(3.0/2 - 11*t) - 329.0/3*sin(3.0/2 - 10*t) - 3*sin(3.0/2 - 9*t) - 469.0/3*sin(3.0/2 - 7*t) + 55.0/3*sin(t + 3.0/2) + 386.0/3*sin(2*t + 14.0/3) + 200.0/3*sin(3*t + 3.0/2) + 189.0/2*sin(4*t + 14.0/3) + 181.0/6*sin(5*t + 3.0/2) + 49.0/2*sin(6*t + 3.0/2) + 421.0/3*sin(8*t + 3.0/2) + 29*sin(12*t + 14.0/3) + 4.0/3*sin(14*t + 1) + 29.0/2*sin(15*t + 3.0/2) + 51.0/2*sin(16*t + 3.0/2) + 16*sin(18*t + 3.0/2) + 11.0/2*sin(19*t + 5.0/3) + 25*sin(20*t + 3.0/2) + 145.0/4*sin(22*t + 3.0/2) + 15.0/4*sin(24*t + 3.0/2) + 32.0/3*sin(25*t + 3.0/2) + 2*sin(26*t + 7.0/4) + 4*sin(30*t + 3.0/2) + 10*sin(33*t + 14.0/3) + 13.0/2*sin(35*t + 14.0/3) + 17.0/2*sin(36*t + 3.0/2) + 5.0/2*sin(37*t + 3.0/2) + 1.0/2*sin(38*t + 5.0/3) + 37.0/6*sin(39*t + 3.0/2) +sin(40*t + 3.0/2) + 3.0/4*sin(42*t + 2) + 5.0/4*sin(43*t + 5.0/3) + 5.0/3*sin(46*t + 3.0/2) +sin(50*t + 9.0/2) +sin(52*t + 3.0/2) + 3.0/4*sin(53*t + 3.0/2) + 2.0/3*sin(54*t + 14.0/3) + 10.0/3*sin(56*t + 5.0/3) + 1.0/3*sin(57*t + 3) + 7.0/3*sin(58*t + 14.0/3) + 3.0/2*sin(59*t + 5.0/3) + 3*sin(60*t + 3.0/2) + 1.0/2*sin(61*t + 3.0/2) + 7.0/3*sin(62*t + 3.0/2) + 5.0/4*sin(63*t + 14.0/3) + 1.0/3*sin(64*t + 29.0/7) + 3.0/4*sin(67*t + 3.0/2) + 1.0/2*sin(68*t + 1) + 1.0/2*sin(69*t + 3.0/2) + 324)*theta(55*PI -t)*theta(t - 51*PI) + (-7.0/6*sin(4.0/3 - 78*t) -sin(3.0/2 - 75*t) - 1.0/4*sin(2.0/3 - 68*t) - 1.0/2*sin(1.0/2 - 62*t) - 11.0/4*sin(3.0/2 - 58*t) - 3*sin(3.0/2 - 56*t) - 2.0/3*sin(3.0/2 - 38*t) - 11.0/2*sin(3.0/2 - 36*t) - 12*sin(3.0/2 - 34*t) - 7.0/2*sin(3.0/2 - 28*t) - 40.0/3*sin(3.0/2 - 26*t) - 9.0/2*sin(5.0/4 - 24*t) - 1047.0/2*sin(3.0/2 -t) + 66*sin(2*t + 14.0/3) + 101.0/3*sin(3*t + 3.0/2) + 1078.0/3*sin(4*t + 3.0/2) + 877.0/2*sin(5*t + 14.0/3) + 158*sin(6*t + 3.0/2) + 181*sin(7*t + 3.0/2) + 315.0/2*sin(8*t + 14.0/3) + 101.0/2*sin(9*t + 14.0/3) + 426.0/5*sin(10*t + 14.0/3) + 91.0/2*sin(11*t + 3.0/2) + 281.0/7*sin(12*t + 3.0/2) + 7*sin(13*t + 5.0/3) + 39*sin(14*t + 14.0/3) + 60*sin(15*t + 14.0/3) + 95.0/3*sin(16*t + 14.0/3) + 179.0/3*sin(17*t + 3.0/2) + 26*sin(18*t + 3.0/2) + 145.0/2*sin(19*t + 3.0/2) + 46*sin(20*t + 3.0/2) + 46*sin(21*t + 3.0/2) + 81.0/2*sin(22*t + 3.0/2) + 29.0/3*sin(23*t + 3.0/2) + 7.0/4*sin(25*t + 3.0/2) + 47.0/3*sin(27*t + 3.0/2) + 37.0/3*sin(29*t + 3.0/2) + 14*sin(30*t + 3.0/2) + 19.0/3*sin(31*t + 3.0/2) + 8*sin(32*t + 3.0/2) + 5.0/3*sin(33*t + 3.0/2) + 11.0/5*sin(35*t + 3.0/2) + 11.0/2*sin(37*t + 3.0/2) + 11.0/2*sin(39*t + 9.0/2) + 5.0/3*sin(40*t + 3.0/2) + 19.0/2*sin(41*t + 3.0/2) + 2.0/3*sin(42*t + 4.0/3) + 11.0/3*sin(43*t + 3.0/2) + 5.0/4*sin(44*t + 3.0/2) + 3.0/2*sin(45*t + 3.0/2) + 1.0/2*sin(47*t + 8.0/7) + 13.0/3*sin(48*t + 9.0/2) + 61.0/6*sin(49*t + 9.0/2) + 1.0/2*sin(50*t + 4) + 11.0/5*sin(51*t + 3.0/2) + 14.0/3*sin(52*t + 9.0/2) + 1.0/2*sin(53*t + 2) + 7.0/2*sin(54*t + 14.0/3) + 11.0/4*sin(55*t + 3.0/2) + 5.0/3*sin(57*t + 9.0/2) + 7.0/3*sin(59*t + 3.0/2) + 31.0/4*sin(60*t + 3.0/2) + 10*sin(61*t + 3.0/2) + 16.0/5*sin(63*t + 14.0/3) + 4*sin(64*t + 9.0/2) + 7.0/4*sin(65*t + 5.0/4) + 11.0/2*sin(66*t + 3.0/2) +sin(67*t + 2.0/3) + 5.0/2*sin(69*t + 4.0/3) + 4*sin(70*t + 4.0/3) + 5*sin(71*t + 4.0/3) + 8.0/3*sin(72*t + 5.0/4) + 1.0/2*sin(73*t + 2.0/3) + 2.0/3*sin(74*t + 3.0/2) +sin(76*t + 9.0/2) + 2.0/3*sin(77*t + 3.0/2) + 7.0/2*sin(79*t + 3.0/2) + 4.0/3*sin(80*t + 1) + 7.0/3*sin(81*t + 3.0/2) - 119)*theta(51*PI -t)*theta(t - 47*PI) + (-2.0/3*sin(3.0/2 - 79*t) - 2*sin(3.0/2 - 77*t) - 2.0/3*sin(1 - 76*t) - 2.0/3*sin(1 - 73*t) - 2*sin(5.0/4 - 72*t) - 3*sin(4.0/3 - 71*t) - 1.0/3*sin(1.0/4 - 70*t) - 1.0/2*sin(1 - 69*t) - 9.0/4*sin(4.0/3 - 65*t) - 2*sin(3.0/2 - 60*t) - 4.0/3*sin(3.0/2 - 58*t) - 11.0/2*sin(3.0/2 - 54*t) - 4.0/3*sin(1 - 49*t) - 9.0/2*sin(3.0/2 - 47*t) - 19.0/3*sin(3.0/2 - 38*t) - 7.0/2*sin(3.0/2 - 37*t) - 3.0/4*sin(3.0/2 - 32*t) - 195.0/4*sin(3.0/2 - 21*t) - 40*sin(3.0/2 - 20*t) - 24*sin(3.0/2 - 19*t) - 105.0/4*sin(3.0/2 - 17*t) - 33.0/2*sin(3.0/2 - 15*t) - 109*sin(3.0/2 - 13*t) - 47.0/3*sin(3.0/2 - 12*t) - 57.0/2*sin(3.0/2 - 8*t) - 114*sin(3.0/2 - 4*t) + 2149.0/4*sin(t + 3.0/2) + 716.0/3*sin(2*t + 3.0/2) + 100.0/3*sin(3*t + 3.0/2) + 121.0/2*sin(5*t + 3.0/2) + 78*sin(6*t + 3.0/2) + 68.0/3*sin(7*t + 14.0/3) + 22.0/3*sin(9*t + 3.0/2) + 139.0/2*sin(10*t + 14.0/3) + 501.0/4*sin(11*t + 3.0/2) + 52*sin(14*t + 3.0/2) + 121.0/3*sin(16*t + 3.0/2) + 175.0/6*sin(18*t + 3.0/2) + 32.0/3*sin(22*t + 3.0/2) + 19*sin(23*t + 5.0/3) + 55.0/3*sin(24*t + 5.0/3) + 51.0/4*sin(25*t + 5.0/3) + 107.0/4*sin(26*t + 5.0/3) + 27.0/2*sin(27*t + 5.0/3) + 23.0/2*sin(28*t + 5.0/3) + 25.0/3*sin(29*t + 5.0/3) + 51.0/4*sin(30*t + 5.0/3) + 33.0/4*sin(31*t + 5.0/3) + 1.0/3*sin(33*t + 1) + 9*sin(34*t + 5.0/3) + 8.0/3*sin(35*t + 9.0/2) + 43.0/3*sin(36*t + 5.0/3) + 4*sin(39*t + 3.0/2) + 13.0/6*sin(40*t + 9.0/2) + 13.0/2*sin(41*t + 7.0/4) + 19.0/4*sin(43*t + 5.0/3) + 5.0/3*sin(44*t + 2) + 10.0/3*sin(45*t + 5.0/3) + 1.0/2*sin(46*t + 4.0/3) + 9.0/4*sin(48*t + 5.0/3) + 7.0/6*sin(50*t + 5.0/3) + 7.0/4*sin(51*t + 9.0/2) + 17.0/4*sin(52*t + 5.0/3) + 7.0/4*sin(53*t + 3.0/2) + 2*sin(55*t + 5.0/3) + 17.0/2*sin(56*t + 5.0/3) + 7.0/4*sin(57*t + 13.0/3) + 3*sin(59*t + 3.0/2) +sin(61*t + 13.0/3) + 13.0/4*sin(62*t + 3.0/2) + 11.0/3*sin(63*t + 7.0/4) + 11.0/3*sin(64*t + 2) +sin(66*t + 5.0/4) + 3.0/2*sin(67*t + 14.0/3) + 2*sin(68*t + 7.0/4) + 1.0/3*sin(74*t + 9.0/2) + 2.0/3*sin(75*t + 5.0/3) + 2*sin(78*t + 5.0/3) + 3.0/4*sin(80*t + 9.0/2) + 5.0/3*sin(81*t + 7.0/4) + 2*sin(82*t + 5.0/3) + 2.0/3*sin(83*t + 4) - 802.0/3)*theta(47*PI -t)*theta(t - 43*PI) + (-sin(3.0/2 - 17*t) - 2*sin(3.0/2 - 14*t) - 4*sin(3.0/2 - 13*t) - 11.0/3*sin(3.0/2 - 11*t) - 5.0/2*sin(3.0/2 - 6*t) - 3.0/2*sin(3.0/2 - 5*t) - 16.0/3*sin(3.0/2 - 4*t) + 49*sin(t + 3.0/2) + 19.0/3*sin(2*t + 3.0/2) +sin(7*t + 3.0/2) + 5.0/2*sin(8*t + 3.0/2) + 9.0/4*sin(9*t + 14.0/3) + 3.0/4*sin(10*t + 3.0/2) + 36.0/5*sin(12*t + 3.0/2) + 7.0/3*sin(15*t + 5.0/3) + 8.0/7*sin(16*t + 5.0/3) + 2.0/3*sin(18*t + 5.0/3) + 1.0/2*sin(19*t + 5.0/3) + 3.0/2*sin(20*t + 5.0/3) + 145.0/6)*theta(43*PI -t)*theta(t - 39*PI) + (-sin(3.0/2 - 20*t) - 7*sin(3.0/2 - 18*t) - 9.0/4*sin(3.0/2 - 17*t) - 3.0/2*sin(3.0/2 - 15*t) - 4.0/3*sin(3.0/2 - 11*t) - 8.0/3*sin(3.0/2 - 10*t) - 17.0/3*sin(3.0/2 - 6*t) -sin(3.0/2 - 5*t) - 35.0/3*sin(3.0/2 - 2*t) - 37*sin(3.0/2 -t) + 33.0/2*sin(3*t + 3.0/2) + 6.0/5*sin(4*t + 14.0/3) + 5.0/2*sin(7*t + 3.0/2) + 5.0/4*sin(8*t + 5.0/3) + 4*sin(9*t + 3.0/2) + 1.0/6*sin(12*t + 9.0/2) + 5*sin(13*t + 5.0/3) + 3*sin(14*t + 5.0/3) + 8.0/3*sin(16*t + 3.0/2) + 4.0/3*sin(19*t + 3.0/2) + 37.0/4)*theta(39*PI -t)*theta(t - 35*PI) + (-11.0/3*sin(3.0/2 - 4*t) - 1.0/2*sin(3.0/2 - 3*t) + 25.0/2*sin(t + 3.0/2) + 35.0/4*sin(2*t + 3.0/2) + 11.0/5*sin(5*t + 3.0/2) - 412)*theta(35*PI -t)*theta(t - 31*PI) + (-1.0/3*sin(1.0/5 - 7*t) - 1.0/2*sin(3.0/2 - 3*t) + 1.0/3*sin(9*t) + 9.0/2*sin(t + 1) + 9.0/2*sin(2*t + 3.0/4) +sin(4*t + 7.0/2) +sin(5*t + 1.0/3) + 2.0/3*sin(6*t + 3) + 1.0/4*sin(8*t + 5.0/2) + 1.0/4*sin(10*t + 3) + 1.0/3*sin(11*t + 1.0/3) + 1.0/5*sin(12*t + 7.0/2) + 39.0/4)*theta(31*PI -t)*theta(t - 27*PI) + (-2.0/3*sin(1.0/5 - 7*t) + 9.0/2*sin(t + 3) + 6*sin(2*t + 3.0/2) + 2.0/3*sin(3*t + 3) + 5.0/3*sin(4*t + 4) +sin(5*t + 1.0/6) + 1.0/2*sin(6*t + 11.0/3) + 1.0/2*sin(8*t + 16.0/5) + 1.0/3*sin(9*t + 1.0/2) + 1.0/5*sin(10*t + 3) + 1.0/3*sin(11*t + 1.0/2) + 1.0/4*sin(12*t + 7.0/2) + 39)*theta(27*PI -t)*theta(t - 23*PI) + (-5.0/2*sin(4.0/3 - 3*t) - 24*sin(2.0/3 -t) + 1.0/2*sin(2*t + 7.0/2) + 1.0/3*sin(4*t + 8.0/3) + 10)*theta(23*PI -t)*theta(t - 19*PI) + (124.0/3 - 119.0/4*sin(1.0/2 -t))*theta(19*PI -t)*theta(t - 15*PI) + (-2.0/3*sin(1 - 10*t) - 1.0/5*sin(7.0/6 - 8*t) + 106.0/3*sin(t + 5.0/2) + 2.0/3*sin(2*t + 1) + 6*sin(3*t + 3.0/2) + 4.0/3*sin(4*t + 4) + 5.0/3*sin(5*t + 1) + 1.0/2*sin(6*t + 16.0/5) + 3.0/2*sin(7*t + 1) + 1.0/2*sin(9*t + 5.0/4) + 2.0/3*sin(11*t + 2.0/3) + 1.0/2*sin(12*t + 9.0/2) + 118.0/3)*theta(15*PI -t)*theta(t - 11*PI) + (-1.0/6*sin(1.0/2 - 8*t) - 1.0/2*sin(6.0/5 - 6*t) -sin(1 - 4*t) + 113.0/4*sin(t + 8.0/3) + 16.0/3*sin(2*t + 15.0/4) + 11.0/3*sin(3*t + 5.0/2) +sin(5*t + 7.0/3) + 2.0/3*sin(7*t + 7.0/3) + 1.0/2*sin(9*t + 7.0/4) + 1.0/5*sin(10*t + 1.0/2) + 1.0/3*sin(11*t + 1) + 8.0/3)*theta(11*PI -t)*theta(t - 7*PI) + (-1.0/2*sin(4.0/3 - 12*t) -sin(2.0/3 - 10*t) -sin(3.0/2 - 9*t) - 1.0/3*sin(2.0/3 - 7*t) + 263.0/4*sin(t + 13.0/4) + 29.0/2*sin(2*t + 2) + 3.0/2*sin(3*t + 4) + 19.0/3*sin(4*t + 11.0/4) +sin(5*t + 2) + 5.0/2*sin(6*t + 4) + 3.0/2*sin(8*t + 5.0/2) +sin(11*t + 1.0/2) - 1280.0/3)*theta(7*PI -t)*theta(t - 3*PI) + (-3.0/2*sin(4.0/3 - 15*t) - 11.0/4*sin(2.0/3 - 11*t) - 47.0/4*sin(1 - 5*t) - 428*sin(1 -t) + 1.0/2*sin(16*t) + 280.0/3*sin(2*t + 1.0/4) + 52*sin(3*t + 13.0/3) + 186.0/5*sin(4*t + 5.0/3) + 11.0/2*sin(6*t + 9.0/4) + 17.0/2*sin(7*t + 21.0/5) + 7.0/3*sin(8*t + 5.0/2) + 5*sin(9*t + 13.0/3) + 7.0/2*sin(10*t + 5.0/4) + 5.0/4*sin(12*t + 5.0/3) + 4.0/3*sin(13*t + 4) + 4.0/3*sin(14*t + 2) +sin(17*t + 9.0/2) +sin(18*t + 3.0/2) - 503.0/3)*theta(3*PI -t)*theta(t +PI))*theta(sqrt(sgn(sin(t/2))));
}
